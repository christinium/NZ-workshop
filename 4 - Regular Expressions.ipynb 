{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "4 - Regular Expressions.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/christinium/NZ-workshop/blob/master/4%20-%20Regular%20Expressions.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "-sfcA9tSUNeu"
      },
      "cell_type": "markdown",
      "source": [
        "# 4 - Regular Expressions!\n",
        "\n",
        "In this section, we will learn what a regular expression is and use our new learn skills to get information from notes in MIMIC.\n",
        "\n",
        "**What is a Regular Expression:**\n",
        "* A regular expression (RegEx) is a sophisticated search command, it makes use of patterns\n",
        "* This can be implemented in many different languages. The specific syntax used in each language may vary, but the concepts are the same!\n",
        "\n",
        "Please refer to this for some basic regular expression definitions: \n",
        "http://web.mit.edu/hackl/www/lab/turkshop/slides/regex-cheatsheet.pdf\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "21rcOnS1Se_9"
      },
      "cell_type": "markdown",
      "source": [
        "### B.0 Fancy Pattern Matching\n",
        "To visualize how regular expressions work, we will use the following website: \n",
        "https://regex101.com/ \n",
        "\n",
        "Please go to this website in another browser.\n",
        "<br><br><br>\n",
        "\n",
        "You will see a window like this.\n",
        "<img src=\"https://raw.githubusercontent.com/christinium/JapanRegEx/316caa5e0f10011b5483c299ec417ed78bf563b0/images/regex101_demo.png\" alt=\"Demo\" style=\"width:700px;\"/>\n",
        "\n",
        "<br><br>\n",
        "### Example 1:\n",
        "1) In the **Test String**  box, please paste the following:\n",
        "\n",
        "```\n",
        "Lisinopril 40 MG PO Daily\n",
        "LISINOPRIL 20 MG PO DAILY\n",
        "lisinoprl 10 mg PO Daily\n",
        "The patient is allergic to lisinopril.\n",
        "April showers bring may flowers.\n",
        "metoprolol XL 100 mg PO Daily\n",
        "```\n",
        "\n",
        "2) In the **Regular Expression** box, please try out each one of these patterns and observe the difference in items that are highlighted.\n",
        "\n",
        "Pattern | Meaning\n",
        "--------|--------\n",
        ". |\tA period catches all characters (each one is a different color)\n",
        "pril |\tthis only catches the phrase pril\n",
        ".\\*pril |\tthis catches 0 or more characters before pril\n",
        "[a-z] |\tthis catches all alphabetical characters\n",
        "[abcdefghijklmnopqrstuvwxyz] | this also catches all alphabetical characters\n",
        "[abcde]|this catches just a, b, c, d, or e\n",
        "[a-z]\\*pril |\tthis catches 0 or more characters, <br> lower case, but does not match spaces or numbers etc\n",
        "[aA-zZ]+pril| this catches words with one or more character prior to ending in pril\n",
        "[aA-zZ]{2,} | pril\tthis catches words with 2 or more characters prir to ending in pril\n",
        "lisinopril&#124;losartan |\tthis catches lisinopril or losartan\n",
        "\\d\t| this catches numerical digits\n",
        "\\d{2} |\tthis catches two numberical digits\n",
        "\n",
        "<br><br>\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "mubH_GJBVHdo"
      },
      "cell_type": "markdown",
      "source": [
        "### Exercise 1: \n",
        "1) In the Test String box, please paste the following:\n",
        "```\n",
        "Metoprolol 10 mg PO daily\n",
        "Omeprazole 10 mg PO BID\n",
        "Lasix 10 mg PO BID\n",
        "Carvedilol 3.125 mg PO BID\n",
        "Amlodipine 10 mg PO Daily\n",
        "Labetalol 100 mg PO TID\n",
        "```\n",
        "\n",
        "2) What would you type in the **Regular Expression** box to find:<br>\n",
        "a) How do you write an expression to just pull out the betablockers, a type of medication that can decrease the heart rate and blood pressure (they end in lol)<br>\n",
        "b) You want to help someone figure out drugs that need to be dosed twice daily (or BID) for dosing purposes. How do you print out only lines that or twice a day (BID)?  \n",
        "c) How do you print lines that are more than once a day (including both BID and TID, which is three times daily)?\n",
        "\n",
        "_\\*\\*Answers on the Bottom_\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "kgGFVdVtZT7-"
      },
      "cell_type": "markdown",
      "source": [
        "## B.1 Regular Expressions using MIMIC Clinical Notes!\n",
        "In this section, we will use a python (yay!) notebook to use use regular expressions on real clinical notes from MIMIC-III.  There are over 2 million (!) free text notes in here, so there is a ton of data to be used!<br><br>\n",
        "We will now go through each python code block.<br>\n",
        "To run a block select it and press **shift** + **enter**\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "CybKUGa8y-IE"
      },
      "cell_type": "markdown",
      "source": [
        "**Import Libraries**:\n",
        "The cell below imports the necessaary libraries so that our python notebook can talk to the MIMIC database using Google's bigquery library and pull the notes from the database."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "IR0nQQOxULq9",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "\n",
        "from google.colab import auth\n",
        "from google.cloud import bigquery\n",
        "from google.colab import files"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "LpazuyM0UkJY"
      },
      "cell_type": "markdown",
      "source": [
        "**Authenticate:** The line of code below ensures you are an authenticated user accessing the MIMIC database. You will need to rerun this each time you open the notebook."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "woVFB6X7J0cn",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "auth.authenticate_user() #This will allow you to authenticate access to BigQuery"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "tp3E1gCKUxA2"
      },
      "cell_type": "markdown",
      "source": [
        "**Query Function:** This is a method that executes a desired SQL query on the database.  If you want to run a query, you can use the function name below, which we named  *run_query()*"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "fyWuYHqMIjxE",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "project_id='new-zealand-2018-datathon'\n",
        "os.environ[\"GOOGLE_CLOUD_PROJECT\"]=project_id\n",
        "# Read data from BigQuery into pandas dataframes.\n",
        "def run_query(query):\n",
        "  return pd.io.gbq.read_gbq(query, project_id=project_id, verbose=False, configuration={'query':{'useLegacySql': False}})"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "NGDh5BToVSbp"
      },
      "cell_type": "markdown",
      "source": [
        "**Actual Query:** This is the actual SQL query. We search for the first 10 echocardiography reports and save them into the variable *first_ten_echo_reports*. <br><br>\n",
        "\n",
        "(* Side note, if you want to run this in bigquery, you can also go to https://bigquery.cloud.google.com, click \"Try the new UI\" on the top right, and paste the text between the quotes into the \"Query Editor\" )"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "R5y8n88sI2IQ",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "first_ten_echo_reports = run_query('''\n",
        "SELECT row_id, subject_id, hadm_id, TEXT\n",
        "FROM `nlp_demo.echos`\n",
        "WHERE CATEGORY = 'Echo'\n",
        "LIMIT 10\n",
        "''')\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "EIck0_f3VvYY"
      },
      "cell_type": "markdown",
      "source": [
        "Let us examine the result of our query by printing this out."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "0neinsdwI-FQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        },
        "outputId": "715800cb-ad27-4ed9-e2aa-c77d45899127"
      },
      "cell_type": "code",
      "source": [
        "#This prints the first ten (or only 10 in this case) rows\n",
        "#If we wanted to print out all of the rows, we can also use:\n",
        "# print(first_ten_echo_reports)\n",
        "# (You can try it in another code block if you want)\n",
        "\n",
        "first_ten_echo_reports.head(10) "
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>row_id</th>\n",
              "      <th>subject_id</th>\n",
              "      <th>hadm_id</th>\n",
              "      <th>TEXT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>60694</td>\n",
              "      <td>27494</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Atrial ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>60697</td>\n",
              "      <td>468</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Source ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>60395</td>\n",
              "      <td>9494</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: H/O car...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>60285</td>\n",
              "      <td>24338</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Congest...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>60113</td>\n",
              "      <td>85490</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Aortic ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>60143</td>\n",
              "      <td>5544</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Endocar...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>60144</td>\n",
              "      <td>5544</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Endocar...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>60146</td>\n",
              "      <td>5544</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Biopros...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>60246</td>\n",
              "      <td>18187</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Aortic ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>60247</td>\n",
              "      <td>18187</td>\n",
              "      <td>None</td>\n",
              "      <td>PATIENT/TEST INFORMATION:\\nIndication: Shortne...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   row_id  subject_id hadm_id  \\\n",
              "0   60694       27494    None   \n",
              "1   60697         468    None   \n",
              "2   60395        9494    None   \n",
              "3   60285       24338    None   \n",
              "4   60113       85490    None   \n",
              "5   60143        5544    None   \n",
              "6   60144        5544    None   \n",
              "7   60146        5544    None   \n",
              "8   60246       18187    None   \n",
              "9   60247       18187    None   \n",
              "\n",
              "                                                TEXT  \n",
              "0  PATIENT/TEST INFORMATION:\\nIndication: Atrial ...  \n",
              "1  PATIENT/TEST INFORMATION:\\nIndication: Source ...  \n",
              "2  PATIENT/TEST INFORMATION:\\nIndication: H/O car...  \n",
              "3  PATIENT/TEST INFORMATION:\\nIndication: Congest...  \n",
              "4  PATIENT/TEST INFORMATION:\\nIndication: Aortic ...  \n",
              "5  PATIENT/TEST INFORMATION:\\nIndication: Endocar...  \n",
              "6  PATIENT/TEST INFORMATION:\\nIndication: Endocar...  \n",
              "7  PATIENT/TEST INFORMATION:\\nIndication: Biopros...  \n",
              "8  PATIENT/TEST INFORMATION:\\nIndication: Aortic ...  \n",
              "9  PATIENT/TEST INFORMATION:\\nIndication: Shortne...  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "R_fUQZkwVzL4"
      },
      "cell_type": "markdown",
      "source": [
        "Let us dig deeper and view the full content of the first report"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "TqaXivbLKPa_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1361
        },
        "outputId": "515fdaac-e8f9-42e9-c87a-4172a2efe67f"
      },
      "cell_type": "code",
      "source": [
        "report = first_ten_echo_reports[\"TEXT\"][0] \n",
        "print(report)\n",
        "#Arrays start numbering at 0.  If you want to print out the second row, you can type:\n",
        "#report = first_ten_echo_reports[\"TEXT\"][1] \n",
        "#Don't forget to rerun the block after you make changes!"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "PATIENT/TEST INFORMATION:\n",
            "Indication: Atrial fibrillation. Cerebrovascular event/TIA.\n",
            "Height: (in) 59\n",
            "Weight (lb): 103\n",
            "BSA (m2): 1.39 m2\n",
            "BP (mm Hg): 101/67\n",
            "HR (bpm): 100\n",
            "Status: Inpatient\n",
            "Date/Time: [**2201-6-19**] at 16:00\n",
            "Test: Portable TTE (Complete)\n",
            "Doppler: Full Doppler and color Doppler\n",
            "Contrast: None\n",
            "Technical Quality: Adequate\n",
            "\n",
            "\n",
            "INTERPRETATION:\n",
            "\n",
            "Findings:\n",
            "\n",
            "This study was compared to the prior study of [**2200-8-21**].\n",
            "\n",
            "\n",
            "LEFT ATRIUM: Marked LA enlargement.\n",
            "\n",
            "RIGHT ATRIUM/INTERATRIAL SEPTUM: Mildly dilated RA. No ASD by 2D or color\n",
            "Doppler.\n",
            "\n",
            "LEFT VENTRICLE: Mild symmetric LVH with normal cavity size and regional/global\n",
            "systolic function (LVEF>55%). No LV mass/thrombus. [Intrinsic LV systolic\n",
            "function likely depressed given the severity of valvular regurgitation.] TDI\n",
            "E/e' >15, suggesting PCWP>18mmHg.\n",
            "\n",
            "RIGHT VENTRICLE: Normal RV chamber size and free wall motion.\n",
            "\n",
            "AORTA: Normal diameter of aorta at the sinus, ascending and arch levels.\n",
            "\n",
            "AORTIC VALVE: Bioprosthetic aortic valve prosthesis (AVR). AVR well seated,\n",
            "normal leaflet/disc motion and transvalvular gradients. No AR.\n",
            "\n",
            "MITRAL VALVE: Mildly thickened mitral valve leaflets. Moderate mitral annular\n",
            "calcification. Mild thickening of mitral valve chordae. Moderate (2+) MR.\n",
            "\n",
            "TRICUSPID VALVE: Mildly thickened tricuspid valve leaflets. Mild [1+] TR. Mild\n",
            "PA systolic hypertension.\n",
            "\n",
            "PULMONIC VALVE/PULMONARY ARTERY: Normal pulmonic valve leaflet. No PS.\n",
            "Physiologic PR.\n",
            "\n",
            "PERICARDIUM: No pericardial effusion.\n",
            "\n",
            "GENERAL COMMENTS: The rhythm appears to be atrial fibrillation.\n",
            "\n",
            "Conclusions:\n",
            "The left atrium is markedly dilated. No atrial septal defect is seen by 2D or\n",
            "color Doppler. There is mild symmetric left ventricular hypertrophy with\n",
            "normal cavity size and regional/global systolic function (LVEF>55%).\n",
            "[Intrinsic left ventricular systolic function is likely more depressed given\n",
            "the severity of valvular regurgitation.] No masses or thrombi are seen in the\n",
            "left ventricle. Tissue Doppler imaging suggests an increased left ventricular\n",
            "filling pressure (PCWP>18mmHg). Right ventricular chamber size and free wall\n",
            "motion are normal. A bioprosthetic aortic valve prosthesis is present. The\n",
            "aortic valve prosthesis appears well seated, with normal leaflet/disc motion\n",
            "and transvalvular gradients. No aortic regurgitation is seen. The mitral valve\n",
            "leaflets are mildly thickened. Moderate (2+) mitral regurgitation is seen. The\n",
            "tricuspid valve leaflets are mildly thickened. There is mild pulmonary artery\n",
            "systolic hypertension. There is no pericardial effusion.\n",
            "\n",
            "IMPRESSION: No cardiac source of embolism seen. Mild symmetric left\n",
            "ventricular hypertrophy with preserved global and regional biventricular\n",
            "systolic function. Normally-functioning aortic valve bioprosthesis. Moderate\n",
            "mitral regurgitation. Mild pulmonary hypertension.\n",
            "\n",
            "Compared with the prior study (images reviewed) of [**2200-8-21**], severely\n",
            "stenotic native aortic valve has been replaced with a bioprosthesis. There has\n",
            "been some regression of LVH. Mitral regurgitation is better appreciated on the\n",
            "current study, but severity is likely similar. Pulmonary pressures are\n",
            "slightly lower today. The other findings are similar.\n",
            "\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "HRd_CVNIWFk_"
      },
      "cell_type": "markdown",
      "source": [
        "We are going to extract the heart rate from this note using regular expressions a powerful tool that allows us to do simple text analytics."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "ZfuBa5zmWxyq"
      },
      "cell_type": "markdown",
      "source": [
        "To use regular expressions in python we import the regular library (typically this is done at the top of the file)."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "BD4XxiTJKLjt",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "6JPvo38lW6br"
      },
      "cell_type": "markdown",
      "source": [
        "Let us see how we can extract the line containing heart rate from the report.  \n",
        "*Remember, the variable \"report\" was established in the code block above.  If you want to look at a different report - you can change the row number and rerun that block and then this block.*"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "b6_7iDmqLvoq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0e4b1441-f249-408f-8825-3d65138285c4"
      },
      "cell_type": "code",
      "source": [
        "regular_expression_query = r'HR.*'\n",
        "hit = re.search(regular_expression_query,report) \n",
        "if hit:\n",
        "  print(hit.group())\n",
        "else:\n",
        "  print('No hit for the regular expression')"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "HR (bpm): 100\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "97-MalZMXGpw"
      },
      "cell_type": "markdown",
      "source": [
        "This is great. But we want to extract the value of the heart rate from this line. Let us see how we can extract two digit numbers from the report"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "zklIpC25RtMb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f70d06e9-a757-41dc-a618-0103b2d25fd4"
      },
      "cell_type": "code",
      "source": [
        "regular_expression_query = r'\\d\\d'\n",
        "hit = re.search(regular_expression_query,report)\n",
        "if hit:\n",
        "  print(hit.group())\n",
        "else:\n",
        "  print('No hit for the regular expression')"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "59\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "NAwzEPaJXd4t"
      },
      "cell_type": "markdown",
      "source": [
        "Regular expressions are **greedy**. This means they match the first occurrence in the input text. Therefore, we see that we get the height using our current regular expression. Let us modify the regular expression so that we get the first two digit number following the occurence of **HR** in the report."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "sqSU0tvGSPdO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "1986376a-94b5-4587-d3fd-76427c658719"
      },
      "cell_type": "code",
      "source": [
        "regular_expression_query = r'(HR \\(bpm\\): )(\\d*)'\n",
        "hit = re.search(regular_expression_query,report)\n",
        "if hit:\n",
        "  print(hit.group(0))\n",
        "  print(hit.group(1))\n",
        "  print(hit.group(2))\n",
        "else:\n",
        "  print('No hit for the regular expression')"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "HR (bpm): 100\n",
            "HR (bpm): \n",
            "100\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "J5LUkH_MYL17"
      },
      "cell_type": "markdown",
      "source": [
        "Great! This is exactly what we wanted. Now let us try to run our regular expression on each of the first ten reports and print the result."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "AwfEpn5VTBX8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "outputId": "ee172086-6bbc-4435-c4f2-57bcb3266550"
      },
      "cell_type": "code",
      "source": [
        "#This runs a for loop - which means for the first 10 rows in our first_ten_echo_reports, we will run our regular expression.  \n",
        "#We wrote the number 10 in the loop because we know there are 10 rows.\n",
        "for i in range(10):\n",
        "  report = first_ten_echo_reports[\"TEXT\"][i]\n",
        "  regular_expression_query = r'(HR \\(bpm\\): )(\\d*)'\n",
        "  hit = re.search(regular_expression_query,report)\n",
        "  if hit:    \n",
        "    print('{} :: {}'.format(i,hit.group(2)))\n",
        "  else:\n",
        "    print('{} :: No hit for the regular expression')\n",
        "  "
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 :: 100\n",
            "1 :: 80\n",
            "2 :: 75\n",
            "{} :: No hit for the regular expression\n",
            "4 :: 107\n",
            "5 :: 95\n",
            "6 :: 78\n",
            "7 :: 96\n",
            "{} :: No hit for the regular expression\n",
            "9 :: 64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "g8twKiJbYfNN"
      },
      "cell_type": "markdown",
      "source": [
        "We do not get any hits for reports 3, and 8. Let us check report 3 to see what happened."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "FEibHL4WTwma",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "print(first_ten_echo_reports[\"TEXT\"][3])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "TFgb6Zfwhz9I"
      },
      "cell_type": "markdown",
      "source": [
        "**Exercise 2:** The pulmonary therapists make a note for patients who are on mechanical ventilation.  We will analyze these notes.<br>\n",
        "a) Save the first 10 respiratory notes where the \"description\" column is \"Respiratory Care Shift Note\" into a variable called \"first_ten_resp_reports\" and then print the results. <br>\n",
        "b) Save the first respiratory note as variable \"resp_report\".<br>\n",
        "c) Print out the line that contains right upper lobe (RUL) lung sounds. Then do the same for RLL (right lower lobe), LUL, LLL."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "vDQWKND7hvV6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        },
        "outputId": "0d6c8b04-3f40-492a-c6f2-5e1438249837"
      },
      "cell_type": "code",
      "source": [
        "#Use this box to get the first 10 respiratory reports\n",
        "#The category is 'Respiratory ' (note the space after respiratory)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>row_id</th>\n",
              "      <th>subject_id</th>\n",
              "      <th>hadm_id</th>\n",
              "      <th>category</th>\n",
              "      <th>description</th>\n",
              "      <th>TEXT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>317108</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of mechanical ventilation...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>316869</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>316870</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>316953</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>315891</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation: [**2133-1-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>317413</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>317496</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>316735</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>316071</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation: [**2133-1-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>316116</td>\n",
              "      <td>31608</td>\n",
              "      <td>152365</td>\n",
              "      <td>Respiratory</td>\n",
              "      <td>Respiratory Care Shift Note</td>\n",
              "      <td>Demographics\\n   Day of intubation:\\n   Day of...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   row_id  subject_id  hadm_id      category                  description  \\\n",
              "0  317108       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "1  316869       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "2  316870       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "3  316953       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "4  315891       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "5  317413       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "6  317496       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "7  316735       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "8  316071       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "9  316116       31608   152365  Respiratory   Respiratory Care Shift Note   \n",
              "\n",
              "                                                TEXT  \n",
              "0  Demographics\\n   Day of mechanical ventilation...  \n",
              "1  Demographics\\n   Day of intubation:\\n   Day of...  \n",
              "2  Demographics\\n   Day of intubation:\\n   Day of...  \n",
              "3  Demographics\\n   Day of intubation:\\n   Day of...  \n",
              "4  Demographics\\n   Day of intubation: [**2133-1-...  \n",
              "5  Demographics\\n   Day of intubation:\\n   Day of...  \n",
              "6  Demographics\\n   Day of intubation:\\n   Day of...  \n",
              "7  Demographics\\n   Day of intubation:\\n   Day of...  \n",
              "8  Demographics\\n   Day of intubation: [**2133-1-...  \n",
              "9  Demographics\\n   Day of intubation:\\n   Day of...  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "9dA-auxEkzst",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1025
        },
        "outputId": "79e4c31a-2f55-428d-a9d5-ac128ee3d980"
      },
      "cell_type": "code",
      "source": [
        "##Use this box to print out the first report\n",
        "resp_report = first_ten_resp_reports[\"TEXT\"][1] \n",
        "print(resp_report)\n"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Demographics\n",
            "   Day of intubation:\n",
            "   Day of mechanical ventilation: 15\n",
            "   Ideal body weight: 56.7 None\n",
            "   Ideal tidal volume: 226.8 / 340.2 / 453.6 mL/kg\n",
            "   Airway\n",
            "   Airway Placement Data\n",
            "   Known difficult intubation: No\n",
            "   Procedure location:\n",
            "   Reason:\n",
            "   Tube Type\n",
            "   ETT:\n",
            "                   Position:  cm at teeth\n",
            "                   Route:\n",
            "                   Type:\n",
            "                   Size:\n",
            "   Tracheostomy tube:\n",
            "                   Type: Cuffed, Perc Trach\n",
            "                   Manufacturer: Portex\n",
            "                   Size: 8.0mm\n",
            "                   PMV:\n",
            "   Cuff  Management:\n",
            "                   Vol/Press:\n",
            "                                   Cuff pressure: 25  cmH2O\n",
            "                                   Cuff volume:   mL /\n",
            "                   Airway problems:\n",
            "                   Comments: [**1-22**] Bedside Trach done; [**1-23**] speech eval for\n",
            "   PMV.\n",
            "   Lung sounds\n",
            "   RLL Lung Sounds: Clear\n",
            "   RUL Lung Sounds: Clear\n",
            "   LUL Lung Sounds: Clear\n",
            "   LLL Lung Sounds: Diminished\n",
            "   Comments:\n",
            "   Secretions\n",
            "   Sputum color / consistency: Blood Tinged / Thick\n",
            "   Sputum source/amount: Suctioned / Small\n",
            "   Comments: Lidocaine adm for persistent cough, used twice.\n",
            "   Ventilation Assessment\n",
            "   Level of breathing assistance: Continuous invasive ventilation\n",
            "   Visual assessment of breathing pattern: Accessory muscle use; Comments:\n",
            "   occasional when anxious.\n",
            "   Assessment of breathing comfort:\n",
            "   Non-invasive ventilation assessment:\n",
            "   Invasive ventilation assessment:\n",
            "   Trigger work assessment: Triggering synchronously\n",
            "   Dysynchrony assessment:\n",
            "   Comments: on PSV all shift, weaned to IPS of 10 cmh20 in AM.\\\n",
            "   Plan\n",
            "   Next 24-48 hours:\n",
            "   Reason for continuing current ventilatory support:\n",
            "   Respiratory Care Shift Procedures\n",
            "   Transports:\n",
            "   Destination (R/T)\n",
            "   Time\n",
            "   Complications\n",
            "   Comments\n",
            "   Bedside Procedures:\n",
            "   Comments:\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "B64FV3XirixA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 689
        },
        "outputId": "f3ee1e05-fe15-4e08-fd2f-b94f4de9b1ee"
      },
      "cell_type": "code",
      "source": [
        "#Printing out lines with RUL\n",
        "\n",
        "regular_expression_query = r'RLL.*'\n",
        "  \n",
        "for i in range(len(resp_reports)):\n",
        "  hit = re.search(regular_expression_query,resp_reports[\"TEXT\"][i]) \n",
        "  if hit:\n",
        "    print(hit.group())\n",
        "  else:\n",
        "    print('No hit for the regular expression')\n"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "RLL Lung Sounds: Crackles\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Tubular\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds:Clear\n",
            "RLL Lung Sounds: Insp Wheeze\n",
            "RLL Lung Sounds: Insp Wheeze\n",
            "No hit for the regular expression\n",
            "RLL Lung Sounds: Exp Wheeze\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Exp Wheeze\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Crackles\n",
            "RLL Lung Sounds: Insp/Exp Wheeze\n",
            "RLL Lung Sounds: Exp Wheeze\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds: Crackles\n",
            "RLL Lung Sounds: Crackles\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Diminished\n",
            "RLL Lung Sounds: Clear\n",
            "RLL Lung Sounds:\n",
            "RLL Lung Sounds: Bronchial\n",
            "RLL Lung Sounds: Crackles\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "gPheQMFgY-fH"
      },
      "cell_type": "markdown",
      "source": [
        "###Answers to Exercises:\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "A37jvcd4YFAS"
      },
      "cell_type": "markdown",
      "source": [
        "**Exercise 1: \n",
        "a) How do you write an expression to just pull out the betablockers, a type of medication that can decrease the heart rate and blood pressure (they end in lol)<br>\n",
        "```\n",
        "[aA-zZ].*lol\n",
        "```\n",
        "b) You want to help someone figure out drugs that need to be dosed twice daily (or BID) for dosing purposes. How do you print out only lines that or twice a day (BID)?  \n",
        "```\n",
        ".*[BID]\n",
        "```\n",
        "c) How do you print lines that are more than once a day (including both BID and TID, which is three times daily)?\n",
        "```\n",
        ".*BID|.*TID\n",
        "```\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "VMjz2jDqtFGD"
      },
      "cell_type": "markdown",
      "source": [
        "**Exercise 2:** The pulmonary therapists make a note for patients who are on mechanical ventilation.  We will analyze these notes.<br>\n",
        "a) Save the first 10 respiratory notes where the \"description\" column is \"Respiratory Care Shift Note\" into a variable called \"first_ten_resp_reports\" and then print the results. <br>\n",
        "```\n",
        "#Use this box to get the first 10 respiratory reports\n",
        "#The category is 'Respiratory ' (note the space after respiratory)\n",
        "\n",
        "resp_reports = run_query('''\n",
        "SELECT row_id, subject_id, hadm_id, category, description, TEXT\n",
        "FROM `nlp_demo.respiratory`\n",
        "''')\n",
        "\n",
        "resp_reports.head(10)\n",
        "```\n",
        "\n",
        "b) Save the first respiratory note as variable \"resp_report\".<br>\n",
        "```\n",
        "resp_report = resp_reports[\"TEXT\"][0] \n",
        "print(resp_report)\n",
        "```\n",
        "c) Print out the line that contains right upper lobe (RUL) lung sounds. Then do the same for RLL (right lower lobe), LUL, LLL.\n",
        "```\n",
        "\n",
        "regular_expression_query = r'RLL.*'\n",
        "  \n",
        "for i in range(len(resp_reports)):\n",
        "  hit = re.search(regular_expression_query,resp_reports[\"TEXT\"][i]) \n",
        "  if hit:\n",
        "    print(hit.group())\n",
        "  else:\n",
        "    print('No hit for the regular expression')\n",
        "\n",
        "## Replace RUL with RLL, LUL, LLL to look at the other lobes\n",
        "```"
      ]
    }
  ]
}